<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redouane&#39;s Blog on Redouane</title>
    <link>https://red0xff.github.io/</link>
    <description>Recent content in Redouane&#39;s Blog on Redouane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Apr 2019 09:27:58 +0200</lastBuildDate>
    
	<atom:link href="https://red0xff.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VolgaCTF 2020 Qualifier - F-Hash writeup</title>
      <link>https://red0xff.github.io/writeups/volgactf_fhash/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0200</pubDate>
      
      <guid>https://red0xff.github.io/writeups/volgactf_fhash/</guid>
      <description>Table of Contents  The Challenge Initial recon Algorithm Optimization  Dynamic programming (the Bottom-up approach) Memoization (Top-down approach)   Solution  Allocating memory for our memoization code, and for our results array How we will add code at the beginning and end of recursive_fun First shellcode: checking if the result is already computed at the beginning of the function Second shellcode: cache results at the end of the function How to assemble shellcodes Other things to keep in mind Final gdb script that automates solving it (using the peda patch command)    The Challenge We are given a binary file, and a short challenge description.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://red0xff.github.io/search/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://red0xff.github.io/search/</guid>
      <description>Search the whole blog for keywords   </description>
    </item>
    
    <item>
      <title>Writeup of the Richelieu challenge</title>
      <link>https://red0xff.github.io/writeups/richelieu_challenge_writeup/</link>
      <pubDate>Fri, 14 Jun 2019 14:55:32 +0200</pubDate>
      
      <guid>https://red0xff.github.io/writeups/richelieu_challenge_writeup/</guid>
      <description>Table of Contents  The Challenge The Solution  Initial Recon a bit of History The First Portrait The Crypto part The Second portrait Reverse Engineering Relative paths : a bad idea? Buffer overflow like in 1999 The best things in life are free()   Conclusion  The Challenge The French external intelligence agency, known as the DGSE, published a cybersecurity challenge, the challenge remained open till June 14th 2019, in this writeup, I will try to explain every step of its solution.</description>
    </item>
    
    <item>
      <title>When exploit mitigations are disabled on modern systems</title>
      <link>https://red0xff.github.io/posts/when_exploit_mitigations_are_disabled_on_modern_systems/</link>
      <pubDate>Wed, 24 Apr 2019 09:27:58 +0200</pubDate>
      
      <guid>https://red0xff.github.io/posts/when_exploit_mitigations_are_disabled_on_modern_systems/</guid>
      <description>Table of Contents  Introduction Prerequisites: Vulnerable program: Vulnerability Analysis of the executable Exploitation  Initial plan Searching for ROP gadgets in the application Implementing the exploit  Part1 - Initial Buffer overflow, stack pivoting Part2 - VirtualProtect the main module to ERW, scanf on ERW memory, and jump to it: Part3 - Final shellcode Putting it all together     Conclusion  Introduction While experimenting with the Windows exploit mitigation policies, I noticed that MinGW-GCC does not enable most of the modern protections by default.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://red0xff.github.io/about/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://red0xff.github.io/about/</guid>
      <description>Bio My name is Redouane, I am a student at the Higher national school of computer science (ESI).
Where to find me  Hackerrank : Competitive programming platform. Root-me : Computer security challenge site. Hackthebox : Penetration testing practice platform. Github Linkedin Youtube Youtube alt  </description>
    </item>
    
    <item>
      <title>HackINI 2018 : Some Writeups</title>
      <link>https://red0xff.github.io/writeups/hackini18/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0200</pubDate>
      
      <guid>https://red0xff.github.io/writeups/hackini18/</guid>
      <description>The Event HackINI (stands for Hack Initiation) is an event that is held once a year at the higher national school of computer science at Algiers, in a whole day, a CTF competition and workshops on various information security subdomains are held in parallel, this year, it was held on February 10th.

The challenges of the CTF competition are mostly easy-medium, this post will contain some writeups on some of the tasks.</description>
    </item>
    
    <item>
      <title>NFSMW2012 : making opponents fly</title>
      <link>https://red0xff.github.io/posts/nfsmw2012_making_opponents_fly/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0200</pubDate>
      
      <guid>https://red0xff.github.io/posts/nfsmw2012_making_opponents_fly/</guid>
      <description>This is a gamehacking tutorial targeting Need for Speed Most Wanted 2012.

In this tutorial, I will register a hotkey that when pressed, will raise all the opponents by 20m to the sky (and by opponents I mean both cops and race opponents), lets start :D
We&amp;rsquo;ll start by searching for the z coordinate of our car (a value that indicates its height), we must keep in mind that the z axis might be inverted (ie.</description>
    </item>
    
    <item>
      <title>Himayatic 2017 - Rev400 Writeup</title>
      <link>https://red0xff.github.io/writeups/himayatic17_rev400/</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0200</pubDate>
      
      <guid>https://red0xff.github.io/writeups/himayatic17_rev400/</guid>
      <description>Hello, today I&amp;rsquo;ll crack a .NET crackme, it was featured on Himayatic CTF, November 2nd 2017. Download link : https://drive.google.com/open?id=0B7U3AsTA9UVfRHdTY2hfQzZrQm8
Let&amp;rsquo;s start :) First, we notice that it&amp;rsquo;s a .NET crackme, it asks for a serial, and displays &amp;quot;Wrong Serial ... !!!&amp;quot; when we enter a random one.

We open it in a .NET decompiler (I used dnSpy, which is a fork of ILSpy), and we immediately locate this function :</description>
    </item>
    
  </channel>
</rss>